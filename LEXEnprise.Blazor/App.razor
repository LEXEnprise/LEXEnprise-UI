@using System.Reflection
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@inject LazyAssemblyLoader AssemblyLoader
@inject NavigationManager Navigator


<CascadingBlazoredModal>
    <Router AppAssembly="@typeof(Program).Assembly"
            OnNavigateAsync="OnNavigateAsync"
            AdditionalAssemblies="_lazyLoadedAssemblies">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    <RedirectToLogin />
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <CascadingAuthenticationState>
                <LayoutView Layout="@typeof(MainLayout)">
                    <CustomNotFound />
                </LayoutView>
            </CascadingAuthenticationState>
        </NotFound>
    </Router>
</CascadingBlazoredModal>

@code
{
    private List<Assembly> _lazyLoadedAssemblies = new List<Assembly>();
    private IEnumerable<Assembly> _assemblies = null;

    private bool IsClientPage(string targetPath)
    {
        return targetPath.Contains("client") ? true : false;
    }

    private bool IsMatterPage(string targetPath)
    {
        return (targetPath.Contains("casefolder") || targetPath.Contains("matter")) ? true : false;
    }

    private async Task OnNavigateAsync(NavigationContext context)
    {
        try
        {
            if (IsClientPage(context.Path))
            {
                _assemblies = await AssemblyLoader.LoadAssembliesAsync(new[] { "LEXEnprise.Blazor.Clients.dll" });
                _lazyLoadedAssemblies.AddRange(_assemblies);
            }
            else if (IsMatterPage(context.Path))
            {
                _assemblies = await AssemblyLoader.LoadAssembliesAsync(new[] { "LEXEnprise.Blazor.Matters.dll" });
                _lazyLoadedAssemblies.AddRange(_assemblies);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
